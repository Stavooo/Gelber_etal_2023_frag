require(raster)
require(data.table)
library(foreach)
source("src/generate_grid.R")
getwd()
source("Model/src/generate_grid.R")
source("Model/src/generate_grid.R")
source("Model/src/generate_agents.R")
source("Model/src/distribute_agents.R")
source("Model/src/multiple_runs.R")
source("Model/src/birth.R")
source("Model/src/death.R")
source("Model/src/initialize.R")
source("Model/src/run_dynamic_model.R")
source("Model/src/multiple_run_dynamic_model.R")
source("Model/src/animate.R")
source("Model/src/GeDo_run.R")
source("Model/src/generate_grid.R")
source("Model/src/generate_agents.R")
source("Model/src/distribute_agents.R")
source("Model/src/multiple_runs.R")
source("Model/src/birth.R")
source("Model/src/death.R")
source("Model/src/initialize.R")
source("Model/src/run_dynamic_model.R")
source("Model/src/multiple_run_dynamic_model.R")
source("Model/src/animate.R")
source("Model/src/GeDo_run.R")
source("Model/src/cookie_cutting.R")
source("Model/src/immigration.R")
source("Model/src/landscape.R")
source("Model/src/disperse.R")
source("Model/parameters.R")
# set the numbers of repetitions
task_id <- 1
# Single model run --------------------------------------------------------
# one model repetiton for the first parameter set
result <- GeDo_run(
mod_par = mod_par,
var_par = var_par[1, ],
switch = switch,
file_name = "test_Selina",
task_id = 1,
sim_id = 1
)
getwd()
cur_path <- "/data-raw/model_output/fig_3"
source("/R/prepare_data_scale_new.R")
getwd()
source("/R/prepare_data_scale_new.R")
source("R/prepare_data_scale_new.R")
source("R/prepare_data_scale_new.R")
cur_path <- "/data-raw/model_output/fig_3"
cur_sim <- prepare_data_scale_new(cur_path)
source("R/prepare_data_scale_new.R")
cur_path <- "data-raw/model_output/fig_3"
cur_sim <- prepare_data_scale_new(cur_path)
library(ggplot2)
getwd()
landscape <- cur_sim$landscape
sample <- cur_sim$sample
panel1 <- ggplot(data = landscape, aes(x = as.factor(fragmentation), y = richness_val, color = as.factor(richness_scale))) +
stat_summary(fun.data = "mean_se", geom = "point", size = 3) +
geom_errorbar(stat = "summary", fun.data = "mean_se", width = 0.2, aes(color = as.factor(richness_scale)), size = 1.2) +
labs(x = "fragmentation level", y = "species richness", title = "Landscape scale") +
scale_color_discrete(type = palette_dis4[c(1, 3)], name = "", labels = c("Net effects", "Geometric effects")) +
geom_smooth(method = lm, se = FALSE, aes(group = as.factor(richness_scale), color = as.factor(richness_scale)), size = 0.5, alpha = 0.5) + theme(text = element_text(size = 15), legend.position="bottom")
palette_dis4 <- c("#D50A0A", "#013369","#f97676", "#3796fd", "#006F3D", "#26FD9B")
cur_path <- "data-raw/model_output/fig_3"
cur_sim <- prepare_data_scale_new(cur_path)
landscape <- cur_sim$landscape
sample <- cur_sim$sample
panel1 <- ggplot(data = landscape, aes(x = as.factor(fragmentation), y = richness_val, color = as.factor(richness_scale))) +
stat_summary(fun.data = "mean_se", geom = "point", size = 3) +
geom_errorbar(stat = "summary", fun.data = "mean_se", width = 0.2, aes(color = as.factor(richness_scale)), size = 1.2) +
labs(x = "fragmentation level", y = "species richness", title = "Landscape scale") +
scale_color_discrete(type = palette_dis4[c(1, 3)], name = "", labels = c("Net effects", "Geometric effects")) +
geom_smooth(method = lm, se = FALSE, aes(group = as.factor(richness_scale), color = as.factor(richness_scale)), size = 0.5, alpha = 0.5) + theme(text = element_text(size = 15), legend.position="bottom")
panel2 <- ggplot(data = sample, aes(x = as.factor(fragmentation), y = richness_val, color = as.factor(richness_scale))) +
stat_summary(fun.data = "mean_se", geom = "point", size = 3) +
geom_errorbar(stat = "summary", fun.data = "mean_se", width = 0.2, aes(color = as.factor(richness_scale)), size = 1.2) +
labs(x = "fragmentation level", y = "species richness", title = "Sample scale") +
scale_color_discrete(type = palette_dis4[c(2, 4)], name = "", labels = c("Net effects", "Geometric effects")) +
geom_smooth(method = lm, se = FALSE, aes(group = as.factor(richness_scale), color = as.factor(richness_scale)), size = 0.5, alpha = 0.5) + theme(text = element_text(size = 15), legend.position="bottom")
#function for extracting legend only
get_only_legend <- function(plot) {
# get tabular interpretation of plot
plot_table <- ggplot_gtable(ggplot_build(plot))
#  Mark only legend in plot
legend_plot <- which(sapply(plot_table$grobs, function(x) x$name) == "guide-box")
# extract legend
legend <- plot_table$grobs[[legend_plot]]
# return legend
return(legend)
}
#extract legend
legend1 <- get_only_legend(panel1)
legend2 <- get_only_legend(panel2)
#remove legends from panel1 and panel2
panel1 <- panel1 + theme(legend.position = "none")
panel2 <- panel2 + theme(legend.position = "none")
lay <- rbind(c(1,2),
c(4,3))
hig <- c(9, 1)
multi_plot <- gridExtra::grid.arrange(panel2, panel1, legend1, legend2, nrow = 2, ncol = 3, heights = hig, layout_matrix = lay)
ggsave("R/figures/fig3.png", plot = multi_plot, width = 12, height = 6)
